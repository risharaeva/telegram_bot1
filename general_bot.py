import random
import telebot
import openai
from bs4 import BeautifulSoup
import requests
import logging
from telebot import types
from constants import TELEGRAM_TOKEN, OPENAI_TOKEN

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = telebot.logger
telebot.logger.setLevel(logging.DEBUG)

# OpenAI API –∫–ª—é—á –∏ ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
openai.api_key = OPENAI_TOKEN
openai.organization = "ORG_TOKEN"

def call_openai_api(prompt, openai_api_key):
    openai.api_key = openai_api_key
    try:
        logging.info(f"Sending request to OpenAI with prompt: {prompt}")
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=500  # Adjust as needed
        )
        return response['choices'][0]['message']['content']
    except Exception as e:
        logging.error(f"OpenAI API Error: {e}")
        return f"–û—à–∏–±–∫–∞ OpenAI: {str(e)}"

def run_whatstheholiday_bot(telegram_token: str, openai_token: str) -> None:
    bot = telebot.TeleBot(telegram_token, parse_mode=None)

    @bot.message_handler(content_types=['text'])
    def get_text_messages(message):
        if message.text == "/start":
            keyboard = types.InlineKeyboardMarkup()
            key_1 = types.InlineKeyboardButton(text='–•–æ—á—É —É–∑–Ω–∞—Ç—å –∫–∞–∫–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫ —Å–µ–≥–æ–¥–Ω—è', callback_data='holiday_list')
            keyboard.add(key_1)
            key_2 = types.InlineKeyboardButton(text='–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–µ', callback_data='about_holiday')
            keyboard.add(key_2)
            key_3 = types.InlineKeyboardButton(text='–ú–Ω–µ —Å–∫—É—á–Ω–æ, –¥–∞–≤–∞–π –ø—Ä–∏–¥—É–º–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫!', callback_data='new_holiday')
            keyboard.add(key_3)
            bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –∑–Ω–∞—é –≤—Å–µ –æ–±–æ –≤—Å–µ—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö. –î–∞–∂–µ –æ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò–Ω–æ–≥–¥–∞ –¥–∞–∂–µ –ø—Ä–∏–¥—É–º—ã–≤–∞—é –Ω–æ–≤—ã–µ –æ—Ç —Å–∫—É–∫–∏.", reply_markup=keyboard)
        elif message.text == "":
            bot.send_message(message.chat.id, "–ü—Ä–∏–µ–º-–ø—Ä–∏–µ–º, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ /start")
        else:
            bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∑–∞—Ç—É–ø–∫–∞ üò≤ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ /start –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑")

    @bot.callback_query_handler(func=lambda call: call.data == 'holiday_list')
    def holiday_list_handler(call):
        response = requests.get("https://celebratoday.com/ru/today").text
        soup = BeautifulSoup(response, 'lxml')
        blocks = soup.find('ul', class_='list-inside')
        li_elements = blocks.find_all('li')

        holiday_names = "\n".join([f"üéâ {li.text.strip()}" for li in li_elements])
        bot.send_message(call.message.chat.id, f'–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å, –±–æ–≥–∞—Ç—ã–π –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, —Ç—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–º–æ—Ç—Ä–∏!\n{holiday_names}')

        keyboard = types.InlineKeyboardMarkup()
        key_2 = types.InlineKeyboardButton(text='–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–µ', callback_data='about_holiday')
        keyboard.add(key_2)
        key_3 = types.InlineKeyboardButton(text='–°–∫—É—á–Ω–æ! –î–∞–≤–∞–π –ø—Ä–∏–¥—É–º–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫!', callback_data='new_holiday')
        keyboard.add(key_3)
        bot.send_message(call.message.chat.id, "–•–æ—á–µ—à—å –æ –Ω–∏—Ö —á—Ç–æ-—Ç–æ —É–∑–Ω–∞—Ç—å?", reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data == 'new_holiday')
    def new_holiday_handler(call):
        words = ["–î–µ–Ω—å", "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –¥–µ–Ω—å", "–§–µ—Å—Ç–∏–≤–∞–ª—å", "–ü—Ä–∞–∑–¥–Ω–∏–∫", "–í—Å–µ–º–∏—Ä–Ω—ã–π –¥–µ–Ω—å"]
        phrases = ["–∂–µ–ª—Ç—ã—Ö —Ç–∞–ø–æ—á–µ–∫", "–∫—É–ª–µ–±—è–∫–∏", "–ª—é–±–≤–∏ —Ö–æ–¥–∏—Ç—å –≤ –≥–æ—Å—Ç–∏", "–Ω–∞–æ–±–æ—Ä–æ—Ç", "–ø—É—Å—Ç—ã—Ö –±–∞–Ω–æ—á–µ–∫ –∏–∑-–ø–æ–¥ –∫–æ—Ñ–µ", "–∫–∏—Å–ª–µ–Ω—å–∫–æ–π –∂–≤–∞—á–∫–∏", "–ï–≥–∏–ø–µ—Ç—Å–∫–æ–π —Å–∏–ª—ã", "—Å–µ–ª–µ–¥–∫–∏ —Å –º–æ–ª–æ–∫–æ–º", "–∫—É—á–µ—Ä—è–≤–æ–≥–æ —á—É–±—á–∏–∫–∞", "–∫–æ–ø—á–µ–Ω—ã—Ö –º–æ–∫–∞—Å–∏–Ω"]

        random_words = random.sample(words, 1)
        random_phrase = random.choice(phrases)
        new_holiday1 = " ".join(random_words) + " " + random_phrase

        bot.send_message(call.message.chat.id, f"\n {new_holiday1} \n")

        keyboard = types.InlineKeyboardMarkup()
        key_1 = types.InlineKeyboardButton(text='–ê —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω—É—é—Ç?', callback_data='holiday_list')
        keyboard.add(key_1)
        key_2 = types.InlineKeyboardButton(text='–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–µ?', callback_data='about_holiday')
        keyboard.add(key_2)
        key_3 = types.InlineKeyboardButton(text='–ü—Ä–∏–∫–æ–ª—å–Ω–æ! –î–∞–≤–∞–π –ø—Ä–∏–¥—É–º–∞–µ–º –µ—â–µ –ø—Ä–∞–∑–¥–Ω–∏–∫!', callback_data='new_holiday')
        keyboard.add(key_3)
        bot.send_message(call.message.chat.id, "–ù—É –∫–∞–∫ —Ç–µ–±–µ –Ω–æ–≤—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫?", reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data == 'about_holiday')
    def about_holiday_handler(call):
        def generate_holiday(message):
            try:
                bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞, –Ω–µ –≤–∞–∂–Ω–æ, –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∏–ª–∏ –≤—ã–¥—É–º–∞–Ω–Ω–æ–≥–æ:")
                bot.register_next_step_handler(message, wait_for_holiday_name)
            except Exception as e:
                bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

        bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞, –Ω–µ –≤–∞–∂–Ω–æ, –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∏–ª–∏ –≤—ã–¥—É–º–∞–Ω–Ω–æ–≥–æ:")
        generate_holiday(call.message)

    def wait_for_holiday_name(message):
        try:
            prompt = 'I will give you the name of the holiday, in Russian or another language, and if this holiday exists, you will briefly talk about this holiday in Russian. If there is no such holiday, in the context of the holiday you come up with a funny, sometimes absurd story in Russian about the appearance of the holiday, as well as traditions of how it is celebrated.  Tell us about the holiday: ' + message.text
            logging.info(f"Generated prompt: {prompt}")
            response = call_openai_api(prompt, openai_token)
            bot.send_message(message.chat.id, "–°–µ–∫—É–Ω–¥–æ—á–∫—É, —Å–µ–π—á–∞—Å –≤—Å–µ —Ä–∞—Å—Å–∫–∞–∂—É...")

            # Send the response from OpenAI
            bot.send_message(message.chat.id, response)

            # Adding options to ask about another holiday or go back to the main menu
            keyboard = types.InlineKeyboardMarkup()
            key_1 = types.InlineKeyboardButton(text='–°–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ –¥—Ä—É–≥–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫', callback_data='about_holiday')
            keyboard.add(key_1)
            key_2 = types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É', callback_data='go_to_main_menu')
            keyboard.add(key_2)
            bot.send_message(message.chat.id, "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=keyboard)

        except Exception as e:
            logging.error(f"Exception in wait_for_holiday_name: {e}")
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

    @bot.callback_query_handler(func=lambda call: call.data == 'go_to_main_menu')
    def go_to_main_menu_handler(call):
        get_text_messages(call.message)

    bot.infinity_polling()

if __name__ == '__main__':
    run_whatstheholiday_bot(TELEGRAM_TOKEN, OPENAI_TOKEN)
